# coding=utf-8
# Copyright 2023 The Google Research Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Library for administer one single survey item with a LLM in scoring mode."""
import dataclasses
from typing import Dict, List, Tuple

from psyborgs import llm_scoring_lib


# constants
# response scales
LIKERT5_CHOICES = (
    'strongly disagree',
    'disagree',
    'neither agree nor disagree',
    'agree',
    'strongly agree',
)


def convert_response_choice_strings_to_numbered_tuples(
    choices_tuple):
  """Converts a list of strings into a list of numbered tuples.

  Good for converting a plain list of survey items or response choices into a
    numbered `ResponseScale`- or `SurveyMeasure`-friendly format.

  Args:
    choices_tuple: A tuple of standardized response choices.

  Returns:
    A list of numbered tuples. For example:

    [(1, 'strongly disagree'),
     (2, 'disagree'),
     (3, 'neither agree nor disagree'),
     (4, 'agree'),
     (5, 'strongly agree')]
  """
  numbered_tuples_list = []

  for i, item in enumerate(choices_tuple):
    numbered_tuples_list.append((i + 1, item))

  return numbered_tuples_list


@dataclasses.dataclass(frozen=True)
class ResponseScale:
  """Class for standardized survey response scales."""
  description: str
  _choices: Tuple[str, Ellipsis]

  @property
  def choices(self):
    return convert_response_choice_strings_to_numbered_tuples(self._choices)

  @property
  def point_range(self):
    return len(self._choices)


def score_item_choice(scoring_function,
                      item_text,
                      response_text):
  """Scores a single response choice.

  Wrapper that takes LLM-specific scoring function to compute the score of a
    single response choice for a given item text. It's quite redundant for now,
    but can be modified in the future to return other scoring information in
    a standardized way.

  Args:
    scoring_function: An LLM scoring function from `llm_scoring_lib`.
    item_text: Survey question string.
    response_text: The string of a single response choice to be scored as a
      continuation.

  Returns:
    A float representing the LLMs score for the `item_text`-`response text`
      pair.
  """
  (choice_score,) = scoring_function(item_text, [response_text])

  return choice_score


def score_item(scoring_function,
               item_text,
               response_scale):
  """Returns LLM scores of all response choices for a given survey item.

  Args:
    scoring_function: An LLM scoring function from `llm_scoring_lib`.
    item_text: Survey question string.
    response_scale: A `ResponseScale` object containing the desired response
      format, point values, and string list of response choices.

  Returns:
    A dict of response scale choices (as tuples) and their respective LLM
    scores. For example:

    {(1, 'strongly disagree'): -9.356916,
     (2, 'disagree'): -5.9719963,
     (3, 'neither agree nor disagree'): -12.580297,
     (4, 'agree'): -5.7852287,
     (5, 'strongly agree'): -10.555626}
  """
  score_dict = {}

  for choice_tuple in response_scale.choices:
    # extract response choice text from tuple
    _, response_text = choice_tuple

    # retrieve choice score
    choice_score = score_item_choice(scoring_function, item_text, response_text)

    # link the score to the original tuple in `score_dict`
    score_dict[choice_tuple] = choice_score

  return score_dict


def sort_choice_scores(
    score_dict,
    reverse = True
    ):
  """Sorts response choices by model probability scores.

  Given a dict of a scored item, returns list of tuples sorted by scores for
  each response choice. Sort order is by descending probability, by default.

  Args:
    score_dict: A dict of response scale choices (as tuples) and their
      respective LLM scores. Generated by `score_item()`.
    reverse: Boolean determining sort direction. When True (default), response
      scale choices are sorted by descending probability.

  Returns:
    A list of tuples of response choices and LLM probability scores, sorted by
      LLM probability scores. For example:

      [((4, 'agree'), -5.7852287),
       ((2, 'disagree'), -5.9719963),
       ((1, 'strongly disagree'), -9.356916),
       ((5, 'strongly agree'), -10.555626),
       ((3, 'neither agree nor disagree'), -12.580297)]
  """
  sorted_choices = sorted(score_dict.items(),
                          key=lambda x: x[1],
                          reverse=reverse)

  return sorted_choices
